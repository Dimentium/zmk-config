/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layers
#define AL1   0
#define AL2   1
#define AL3   2
#define AR1   3
#define AR2   4
#define AR3   5
#define NUM   6
#define NAV   7
#define FUN   8
#define SYS   9

#define LEFT_HALF 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 
#define RIGHT_HALF 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS    30 31 32 33

// Bindings
#define _____ &none
#define TAPPING_TERM 300  // tapping-term-ms = <300>;
#define QUICK_TAP_TERM 250  // tapping-term-ms = <300>;
#define COMBO_TIMEOUT_2 30  // timeout-ms for 2 fingers cofbos
#define COMBO_TIMEOUT_3 60  // timeout-ms for 2 fingers combos

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
 };
&sk {
    release-after-ms = <1000>;
    quick-release;
};
&lt {
    tapping-term-ms = <200>;
    flavor = "balanced";
};

/ {
combos {
    compatible = "zmk,combos";
    to_eng { 
        bindings = <&to_eng>;
        key-positions = <11 12 13>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < AL1 AR1 >;
    };
    to_rus {
        bindings = <&to_rus>;
        key-positions = <16 17 18>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < AL1 AR1 >;
    };

    lock {
        bindings = <&to_eng_lock>;
        key-positions = < 1 3 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    alt_esc {
        bindings = <&kp LA(ESC)>;
        key-positions = <11 12 13>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    nav_shift_alt_esc {
        bindings = <&kp LS(LA(ESC))>;
        key-positions = <11 12 13>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < NAV >;
    };

    copy_cut {
        bindings = <&td_copy_cut>;
        key-positions = <11 13>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    paste {
        bindings = <&kp LC(V)>;
        key-positions = <12 13>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    undo {
        bindings = <&kp LC(Z)>;
        key-positions = <10 13>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    nav_shift_undo {
        bindings = <&kp LS(LC(Z))>;
        key-positions = <10 13>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < NAV >;
    };
    nav_select_all {
        bindings = <&kp LC(A)>;
        key-positions = <11 13>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < NAV >;
    };

    escape {
        bindings = <&kp ESC>;
        key-positions = <7 8>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    escape_left {
        bindings = <&kp ESC>;
        key-positions = <1 2>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    enter {
        bindings = <&kp ENTER>;
        key-positions = <17 18>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    enter_left {
        bindings = <&kp ENTER>;
        key-positions = <11 12>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < AL1 AR1 >;
    };
    backspace {
        bindings = <&bspc_del>;
        key-positions = <16 17>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
    };
    ctrl_backspace {
        bindings = <&kp LC(BACKSPACE)>;
        key-positions = <16 19>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
    };
    delete {
        bindings = <&kp DEL>;
        key-positions = <18 19>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    nav_backspace {
        bindings = <&bspc_del>;
        key-positions = <12 13>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < NAV >;
    };
    tab {
        bindings = <&kp TAB>;
        key-positions = <6 7>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    tab_left {
        bindings = <&kp TAB>;
        key-positions = <2 3>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
};

macros {
    num_shifted: num_shifted {
        label = "num_shifted";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings =
            <&macro_press>,
            <&mo NUM &kp LSHFT>,
            <&macro_pause_for_release>,
            <&macro_release>,
            <&mo NUM &kp LSHFT>;
        };

    to_eng: to_eng {
        label = "to_eng";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AL1 &kp LC(LS(N1))>;
    };
    to_eng_lock: to_eng_lock {
        label = "to_eng_lock";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AL1 &kp LC(LS(N1)) &kp LG(L)>;
    };
    to_rus: to_rus {
        label = "to_rus";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AR1 &kp LC(LS(N3))>;
    };
    sl_al2: sl_al2 {
        label = "sl_al2";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AL2>;
    };
    sl_al3: sl_al3 {
        label = "sl_al3";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AL3>;
    };
    sl_ar2: sl_ar2 {
        label = "sl_ar2";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AR2>;
    };
    sl_ar3: sl_ar3 {
        label = "sl_ar3";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AR3>;
    };
};

behaviors {
    mtl: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        flavor = "tap-preferred";
        // flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < RIGHT_HALF THUMBS >;    // <---[[right-hand keys]]
    };
    mtr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        flavor = "tap-preferred";
        // flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < LEFT_HALF THUMBS >;    // <---[[left-hand keys]]
    };

    msl: homerow_shift_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_SHIFT_LEFT";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        // flavor = "tap-preferred";
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < RIGHT_HALF THUMBS >;    // <---[[right-hand keys]]
    };
    msr: homerow_shift_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_SHIFT_RIGHT";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        // flavor = "tap-preferred";
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < LEFT_HALF THUMBS >;    // <---[[left-hand keys]]
    };

    mol: homerow_layers_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_LAYERS_LEFT";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        flavor = "tap-preferred";
        // flavor = "balanced";
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = < RIGHT_HALF THUMBS >;    // <---[[right-hand keys]]
    };
    mor: homerow_layers_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_LAYERS_RIGHT";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        flavor = "tap-preferred";
        // flavor = "balanced";
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = < LEFT_HALF THUMBS >;    // <---[[left-hand keys]]
    };
    td_copy_cut: tap_dance_copy_cut {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_COPY_CUT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp LC(C)>, <&kp LC(X)>;
    };
    bspc_del: backspace_delete {
        compatible = "zmk,behavior-mod-morph";
        label = "BACKSPACE_DELETE";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp DELETE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
};

keymap {
    compatible = "zmk,keymap";

// ======================================================================= ALPHA =======================================================================================
alpha1 {
    label = "Alpha 1";
    bindings = <
    _____             &mtl LCTL L        &mtl LALT G   &mtl LGUI D   _____            _____        &mtr LGUI H       &mtr LALT U     &mtr LCTL O      _____  
    &msl LSHFT I      &mol NUM R         &mol FUN S    &mol NAV T    _____            _____        &mor NAV N        &mor FUN E      &mor NUM A       &msr RSHFT C
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp SPC       &num_shifted     &sl_al3      &sl_al2
    >;
};
alpha2 {
    label = "Alpha 2";
    bindings = <
    _____             &kp V              &kp W         &kp M         _____            _____        &kp F             &kp NUBS        &kp MINUS        _____
    &kp Q             &kp J              &kp P         &kp K         _____            _____        &kp B             &kp Z           &kp X            &kp Y
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       _____         _____            &to AL1      _____
    >;
};
alpha3 {
    label = "Alpha 3";
    bindings = <
    _____             &kp LS(SQT)        &kp LS(LBKT)  &kp LS(RBKT)  _____            _____        &kp LS(BSLH)      &kp SEMI        &kp LS(SEMI)     _____
    &kp GRAVE         &kp SQT            &kp LBKT      &kp RBKT      _____            _____        &kp BSLH          &kp COMMA       &kp DOT          &kp FSLH
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       _____         _____            _____        &to AL1 
    >;
};

// ======================================================================= ALPHA RUS =======================================================================================

alpha1rus {
    label = "Alpha 1R";
    bindings = <
    _____             &mtl LCTL K        &mtl LALT D   &mtl LGUI L   _____            _____        &mtr LGUI V       &mtr LALT E     &mtr LCTL J      _____
    &msl LSHFT B      &mol NUM H         &mol FUN C    &mol NAV N    _____            _____        &mor NAV Y        &mor FUN T      &mor NUM F       &msr RSHFT R
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp SPC       &num_shifted     &sl_ar3      &sl_ar2
    >;
};
alpha2rus {
    label = "Alpha 2R";
    bindings = <
    _____             &kp SEMI           &kp U         &kp LBKT      _____            _____        &kp A             &kp X           &kp MINUS        _____
    &kp DOT           &kp Q              &kp G         &kp W         _____            _____        &kp COMMA         &kp P           &kp M            &kp S
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       _____         _____            &to AR1      _____
    >;
};
alpha3rus {
    label = "Alpha 3R";
    bindings = <
    _____             _____              _____         &kp RBKT      _____            _____        &kp NUBS          &kp LS(N4)      &kp LS(N6)       _____
    &kp GRAVE         &kp SQT            &kp I         &kp O         _____            _____        &kp BSLH          &kp LS(FSLH)    &kp FSLH         &kp Z
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       _____         _____            _____        &to AR1 
    >;
};

// ======================================================================= ADDINIONAL =======================================================================================

numbers {
    label = "Num";
    bindings = <
    _____          &kp KP_DIVIDE     &kp KP_PLUS       &kp N5        _____            _____        &kp N6            &kp MINUS       &kp EQUAL        _____
    &kp N1         &kp N2            &kp N3            &kp N4        _____            _____        &kp N7            &kp N8          &kp N9           &kp N0
    _____          _____             _____             _____         _____            _____        _____             _____           _____            _____
                                                       &mt LSHFT SPC &kp RALT         &kp COMMA    &kp DOT
    >;
};

navigation {
    label = "Nav";
    bindings = <
    _____             &kp LCTL           &kp LALT      &kp LGUI      _____            _____        &kp PG_DN         &kp UP          &kp PG_UP        _____
    &kp LSHFT         &kp TAB            &kp HOME      &kp END       _____            _____        &kp LEFT          &kp DOWN        &kp RIGHT        &bspc_del
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp SPC       _____            _____        &mt LSHFT SPC
    >;
};

function {
    label = "Fns";
    bindings = <
    _____             &kp LCTL           &kp LALT      &mtl LGUI F5  _____            _____        &mtr LGUI F6      &mtr LALT F11   &mtr LCTL F12    _____
    &mtl LSHFT F1     &kp F2             &kp F3        &kp F4        _____            _____        &kp F7            &kp F8          &kp F9           &mtr RSHFT F10
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp K_APP     &kp PRINTSCREEN  &kp C_EJECT  &mo SYS
    >;
};
system {
    label = "Sys";
    bindings = <
    _____             &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2  _____            _____        &kp C_MUTE        &kp C_VOL_DN    &kp C_VOL_UP     _____
    &kp C_BRI_DN      &kp C_BRI_UP       &bt BT_PRV    &bt BT_NXT    _____            _____        &kp C_PREV        &kp C_PP        &kp C_NEXT       _____
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &bt BT_CLR    &bootloader      &bootloader  _____                                                                      
    >;
};
    };
};