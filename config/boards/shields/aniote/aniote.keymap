#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

// Timeouts
#define TIMEOUT_LT 300
#define TIMEOUT_TD 300
#define TIMEOUT_SL 1000
#define TIMEOUT_SK 5000
#define TIMEOUT_COMBO 70

#define COMBO_LETTER(BINDINGS, KEYPOS_LEFT, KEYPOS_RIGHT) \
  combo_left_##BINDINGS { \
    bindings      = <&kp BINDINGS>; \
    key-positions = <KEYPOS_LEFT>; \
    layers        = <L_LAT>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  }; \
  combo_right_##BINDINGS { \
    bindings      = <&kp BINDINGS>; \
    key-positions = <KEYPOS_RIGHT>; \
    layers        = <R_LAT>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  }; \
  combo_left_##BINDINGS##_ru { \
    bindings      = <&kp BINDINGS ## _RU>; \
    key-positions = <KEYPOS_LEFT>; \
    layers        = <L_RUS>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  }; \
  combo_right_##BINDINGS##_ru { \
    bindings      = <&kp BINDINGS ## _RU>; \
    key-positions = <KEYPOS_RIGHT>; \
    layers        = <R_RUS>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  };

#define COMBO_KEY(BINDINGS, KEYPOS_LEFT, KEYPOS_RIGHT, LAYER) \
  combo_left_##BINDINGS { \
    bindings      = <&kp BINDINGS>; \
    key-positions = <KEYPOS_LEFT>; \
    layers        = <L_ ## LAYER>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  }; \
  combo_right_##BINDINGS { \
    bindings      = <&kp BINDINGS>; \
    key-positions = <KEYPOS_RIGHT>; \
    layers        = <R_ ## LAYER>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  };

#define COMBO_SYS(NAME, BINDINGS, KEYPOS_LEFT, KEYPOS_RIGHT, LAYER) \
  combo_left_##NAME { \
    bindings      = <BINDINGS>; \
    key-positions = <KEYPOS_LEFT>; \
    layers        = <L_ ## LAYER>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  }; \
  combo_right_##NAME { \
    bindings      = <BINDINGS>; \
    key-positions = <KEYPOS_RIGHT>; \
    layers        = <R_ ## LAYER>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  };

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_left_##NAME { \
    bindings      = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers        = <LAYERS>; \
    timeout-ms    = <TIMEOUT_COMBO>; \
  };

/***************** Keyboard ******************
*    U1 U2 U3 U4 U5      U5R U4R U3R U2R U1R
*    D1 D2 D3 D4 D5      D5R D4R D3R D2R D1R
**********************************************/
#define U1  0
#define U2  1
#define U3  2
#define U4  3
#define U5  4
#define D1  5
#define D2  6
#define D3  7
#define D4  8
#define D5  9

#define U1R  4
#define PFU  4
#define U2R  3
#define RFU  3
#define U3R  2
#define MFU  2
#define U4R  1
#define IFU  1
#define U5R  0
#define TFU  0
#define D1R  9
#define PFD  9
#define D2R  8
#define RFD  8
#define D3R  7
#define MFD  7
#define D4R  6
#define IFD  6
#define D5R  5
#define TFD  5

#define A_RU F
#define B_RU COMMA
#define C_RU W
#define D_RU L
#define E_RU T
#define F_RU A
#define G_RU U
#define H_RU LBKT
#define I_RU B
#define J_RU Q
#define K_RU R
#define L_RU K
#define M_RU V
#define N_RU Y
#define O_RU J
#define P_RU G
#define Q_RU DOT
#define R_RU H
#define S_RU C
#define T_RU N
#define U_RU E
#define V_RU D
#define W_RU SEMI
#define X_RU Z
#define Y_RU S
#define Z_RU P

#define CH      X
#define CH_RU   X
#define SH      I
#define SH_RU   I
#define SCH     O
#define SCH_RU  O
#define SOFT    M
#define SOFT_RU M
#define HARD    RBKT
#define HARD_RU RBKT
#define YO      GRAVE
#define YO_RU   GRAVE
#define AE      SQT
#define AE_RU   SQT

#define COMMA_RU LS(FSLH)
#define DOT_RU      FSLH
#define SEMI_RU  LS(N4)
#define COLON_RU LS(N6)
#define FSLH_RU     KP_DIVIDE
#define QMARK_RU LS(N7)
#define SQT_RU   LA(O)
#define DQT_RU   LS(N2)

#define THUMB &kp SPACE
#define _____ &none

// Layers
#define L_LAT 0
#define L_RUS 1
#define L_LTR 0 1
#define L_NUM 2
#define L_TXT 2
#define L_SYM 3
#define L_ADD 4
#define L_NAV 5
#define L_FUN 6
#define L_SYS 7
#define L_ALL 0 1 2 3 4 5 6 7

#define R_LAT 8
#define R_RUS 9
#define R_LTR 8 9
#define R_NUM 10
#define R_SYM 11
#define R_ADD 12
#define R_NAV 13
#define R_FUN 14
#define R_SYS 15
#define R_ALL 9 10 11 12 13 14 15

#define BLE 16

// tune-up default behaviors
&sk { release-after-ms = <TIMEOUT_SK>; quick-release; };
&sl { release-after-ms = <TIMEOUT_SL>; };
&lt { tapping-term-ms  = <TIMEOUT_LT>; flavor = "tap-preferred";} ;

/ {
    combos {
        compatible = "zmk,combos";
        combo_boot   { bindings = <&bootloader>; key-positions = < 0 2 4 5 7 9 >; timeout-ms = <TIMEOUT_COMBO>; };
        combo_studio { bindings = <&studio_unlock>; key-positions = < 1 2 3 6 7 8 >; timeout-ms = <TIMEOUT_COMBO>; };
        // combo_repeat        { layers = <L_LTR>; timeout-ms = <T2>; key-positions = <U1 D5>;         bindings = <&key_repeat>; };   rcombo_repeat        { layers = <R_LTR>; timeout-ms = <T2>; key-positions = <U1R D5R>;         bindings = <&key_repeat>; };

// Letters
        // single_a
        COMBO_LETTER( B    , U1 D4       , U1R D4R         ) //
        COMBO_LETTER( C    , D3 U4       , D3R U4R         ) //
        COMBO_LETTER( D    , U1 U2       , U1R U2R         ) //
        // single_e
        COMBO_LETTER( F    , U3 D4       , U3R D4R         ) //
        COMBO_LETTER( G    , U1 U3       , U1R U3R         ) //
        COMBO_LETTER( H    , D2 U4       , D2R U4R         ) //
        // single_i
        COMBO_LETTER( J    , U1 D3       , U1R D3R         ) //
        COMBO_LETTER( K    , D1 D2       , D1R D2R         ) //
        COMBO_LETTER( L    , D1 D4       , D1R D4R         ) //
        COMBO_LETTER( M    , D3 D4       , D3R D4R         ) //
        // single_n
        // single_o
        COMBO_LETTER( P    , U3 U4       , U3R U4R         ) //
        COMBO_LETTER( Q    , U1 D2       , U1R D2R         ) //
        // COMBO_LETTER( R    , D3 D5       , D3R D5R         )
        // single_s
        // single_t
        COMBO_LETTER( U    , D2 D3       , D2R D3R         ) //
        COMBO_LETTER( V    , U1 U4       , U1R U4R         ) //
        COMBO_LETTER( W    , D1 U3       , D1R U3R         ) //
        COMBO_LETTER( X    , U2 U3       , U2R U3R         ) //
        COMBO_LETTER( Y    , D1 D3       , D1R D3R         ) //
        COMBO_LETTER( Z    , U2 U4       , U2R U4R         ) //

        COMBO_LETTER( CH   , D1 U4       , D1R U4R         ) //
        COMBO_LETTER( SH   , U2 D4       , U2R D4R         ) //
        COMBO_LETTER( SCH  , U2 D3       , U2R D3R         ) //
        COMBO_LETTER( SOFT , D2 D4       , D2R D4R         ) //
        COMBO_LETTER( HARD , D1 U2       , D1R U2R         ) //
        COMBO_LETTER( YO   , U2 U3 U4    , U2R U3R U4R     ) //
        COMBO_LETTER( AE   , D2 U3       , D2R U3R         ) //

// Punctuation
        COMBO_LETTER( COMMA, D3 D5       , D3R D5R         ) //
        COMBO_LETTER( SEMI , U3 D5       , U3R D5R         ) //
        COMBO_LETTER( DOT  , D2 D5       , D2R D5R         ) //
        COMBO_LETTER( COLON, U2 D5       , U2R D5R         ) //
        COMBO_LETTER( FSLH , D1 D5       , D1R D5R         ) //
        COMBO_LETTER( QMARK, U1 D5       , U1R D5R         ) //
        COMBO_LETTER( SQT  , D4 D5       , D4R D5R         ) //
        COMBO_LETTER( DQT  , U4 D5       , U4R D5R         ) //

 // NUM layer
        // COMBO_KEY( N7      , U3 U4       , U3R U4R         , NUM )
        // COMBO_KEY( N8      , U2 U3       , U2R U3R         , NUM )
        // COMBO_KEY( N9      , D3 D4       , D3R D4R         , NUM )
        // COMBO_KEY( N0      , D2 D3       , D2R D3R         , NUM )
        // COMBO_KEY( MINUS   , U2 U4       , U2R U4R         , NUM )
        // COMBO_KEY( EQUAL   , D2 D4       , D2R D4R         , NUM )
 // FUN layer
        // COMBO_KEY( F7      , U3 U4       , U3R U4R         , FUN )
        // COMBO_KEY( F8      , U2 U3       , U2R U3R         , FUN )
        // COMBO_KEY( F9      , D3 D4       , D3R D4R         , FUN )
        // COMBO_KEY( F10     , D2 D3       , D2R D3R         , FUN )
        // COMBO_KEY( F11     , U2 U4       , U2R U4R         , FUN )
        // COMBO_KEY( F12     , D2 D4       , D2R D4R         , FUN )

// NAV layer
        // COMBO_KEY( PG_UP   , U3 U4       , U3R U4R         , NAV )
        // COMBO_KEY( PG_DN   , D3 D4       , D3R D4R         , NAV )
        // COMBO_KEY( SPC     , D2 D3 D4    , D2R D3R D4R     , LTR )
        // COMBO_KEY( BSPC    , U3 D4       , U3R D4R         , LTR )
        // COMBO_KEY( DEL     , U3 D2       , U3R D2R         , LTR )
        COMBO_KEY( TAB     , U2 D2       , U2R D2R         , LTR ) //
        COMBO_KEY( ESC     , U1 D1       , U1R D1R         , LTR ) //
        COMBO_KEY( ENTER   , U4 D4       , U4R D4R         , LTR ) //

// SYS combos
        // COMBO_SYS( BSPC_W  , &kp LA(BACKSPACE), U2 U3 D4    , U2R U3R D4R     , LTR )
        // COMBO_SYS( DEL_W   , &kp LA(DELETE   ), U3 U4 D2    , U3R U4R D2R     , LTR )
        COMBO_SYS( SHFTLOCK, &kt LSHFT        , U3 D3       , U3R D3R         , LTR ) //
        // COMBO_SYS( LCTRL   , &sk LCTRL        , U2 D2       , U2R D2R         , LTR )
        // COMBO_SYS( LALT    , &sk LALT         , U3 D3       , U3R D3R         , LTR )
        // COMBO_SYS( LGUI    , &sk LGUI         , U4 D4       , U4R D4R         , LTR )

        COMBO( to_eng_left , &to_eng_l        , D1 D2 D3 D5       , L_LTR R_LTR )
        COMBO( to_rus_left , &to_rus_l        , U1 U2 U3 D5       , L_LTR R_LTR )
        // COMBO( to_eng_right, &to_eng_r        , D1R D2R D3R D5R   , L_LTR R_LTR )
        // COMBO( to_rus_right, &to_rus_r        , U1R U2R U3R D5R   , L_LTR R_LTR )

        // COMBO( sl_ble      , &sl BLE          , U1 U5 D1 D5       , L_LTR R_LTR )
        // COMBO( clear_ble   , &bt BT_CLR       , U2 U3 D4 D2 D3 D4 , L_LTR R_LTR )

        // COMBO( copy_cut    , &td_copy_cut     , D2 D4             , L_NAV R_NAV )
        // COMBO( paste       , &kp LG(V)        , U2 U4             , L_NAV R_NAV )
        // COMBO( undo        , &kp LG(Z)        , U3 D2 D4          , L_NAV R_NAV )
    };

    macros {
        to_eng_l: to_eng_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to L_LAT &kp F18>;};
        // to_eng_lock_l: to_eng_lock_l {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings = <&to L_LAT &kp F18 &kp LC(LG(Q))>;};
        to_rus_l: to_rus_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to L_RUS &kp F19>;};
        // to_eng_r: to_eng_r {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings = <&to R_LAT &kp F18>;};
        // to_eng_lock_r: to_eng_lock_r {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings = <&to R_LAT &kp F18 &kp LC(LG(Q))>;};
        // to_rus_r: to_rus_r {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings = <&to R_RUS &kp F19>;};
    };

    behaviors {
        td_copy_cut: tap_dance_copy_cut {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = < TIMEOUT_TD >;
            bindings = <&kp LG(C)>, <&kp LG(X)>;};
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";
        L_LAT {
            display-name = "EN";
            bindings = <
                &kp I           &kp A               &kp E               &kp O               &sk LSHFT
                &kp R           &kp S               &kp T               &kp N               &lt L_TXT SPC
            >;
        };

        L_RUS {
            display-name = "RU";
            bindings = <
                &kp I_RU        &kp A_RU            &kp E_RU            &kp O_RU            &sk LSHFT
                &kp R_RU        &kp S_RU            &kp T_RU            &kp N_RU            &lt L_TXT SPC
            >;
        };

        L_NUM {
            display-name = "RU";
            bindings = <
                &sk LCTRL       &sk LALT            &kp UP              &sk LGUI            &kp BSPC
                &sk LSHFT       &kp LEFT            &kp DOWN            &kp RIGHT           &lt L_TXT SPC
            >;
        };
    };
};
