/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layers
#define AL1   0
#define AL2   1
#define AL3   2
#define AR1   3
#define AR2   4
#define NUM   5
#define NUM2  6
#define NAV   7
#define FUN   8
#define SYS   9

#define LEFT_HALF   0  1  2  6  7  8  9
#define RIGHT_HALF  3  4  5 10 11 12 13
#define THUMBS     14 15 16 17

// Bindings
#define _____ &none
#define TAPPING_TERM    300  // tapping-term-ms = <300>;
#define QUICK_TAP_TERM  250  // tapping-term-ms = <300>;
#define COMBO_TIMEOUT_2  50  // timeout-ms for 2 fingers cofbos
#define COMBO_TIMEOUT_3  80  // timeout-ms for 2 fingers combos

&mt {
    tapping-term-ms = <200>;
    flavor = "balanced";
 };
&sk {
    release-after-ms = <5000>;
    quick-release;
};
&lt {
    tapping-term-ms = <200>;
    flavor = "balanced";
};

/ {
combos {
    compatible = "zmk,combos";
    boot {
        bindings = <&bootloader>;
        key-positions = < 0 1 2 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < FUN >;
    };
    to_eng { 
        bindings = <&to_eng>;
        key-positions = < 7 8 9>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < AL1 AR1 >;
    };
    to_rus {
        bindings = <&to_rus>;
        key-positions = < 10 11 12>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < AL1 AR1 >;
    };

    lock {
        bindings = <&to_eng_lock>;
        key-positions = < 0 1 2 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    alt_esc {
        bindings = <&kp LA(ESC)>;
        key-positions = < 6 7 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    shift_alt_esc {
        bindings = <&kp LS(LA(ESC))>;
        key-positions = < 6 7 >;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < FUN >;
    };
    shift_alt_esc_2 {
        bindings = <&kp LS(LA(ESC))>;
        key-positions = < 6 7 8>;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < AL1 AR1 >;
    };

    copy_cut {
        bindings = <&td_copy_cut>;
        key-positions = < 7 9 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    paste {
        bindings = <&kp LC(V)>;
        key-positions = < 0 2 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    undo {
        bindings = <&kp LC(Z)>;
        key-positions = < 6 9 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    redo {
        bindings = <&kp LS(LC(Z))>;
        key-positions = < 6 9 >;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < FUN >;
    };
    nav_select_all {
        bindings = <&kp LC(A)>;
        key-positions = < 6 7 8 9 >;
        timeout-ms = < COMBO_TIMEOUT_3 >;
        layers = < AL1 AR1 >;
    };
    escape_left_al1 {
        bindings = <&esc_to_al1>;
        key-positions = < 0 1 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
    };
    enter_left {
        bindings = <&kp ENTER>;
        key-positions = < 7 8 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    backspace_left {
        bindings = <&bspc_del>;
        key-positions = < 8 9 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    ctrl_backspace_left {
        bindings = <&kp LC(BACKSPACE)>;
        key-positions = < 7 8 9>;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };
    tab_left {
        bindings = <&kp TAB>;
        key-positions = < 1 2 >;
        timeout-ms = < COMBO_TIMEOUT_2 >;
        layers = < AL1 AR1 >;
    };

al3_0 { bindings = <&kp SQT>  ; key-positions = < 15 0 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
al3_1 { bindings = <&kp LBKT> ; key-positions = < 15 1 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
al3_2 { bindings = <&kp RBKT> ; key-positions = < 15 2 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
al3_6 { bindings = <&kp GRAVE>; key-positions = < 15 6 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
al3_7 { bindings = <&kp DOT>  ; key-positions = < 15 7 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
al3_8 { bindings = <&kp COMMA>; key-positions = < 15 8 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
al3_9 { bindings = <&kp SEMI> ; key-positions = < 15 9 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};

ar2_0 { bindings = <&kp FSLH>; key-positions = < 14 0 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
ar2_1 { bindings = <&kp BSLH>; key-positions = < 14 1 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
ar2_2 { bindings = <&kp F>   ; key-positions = < 14 2 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
ar2_6 { bindings = <&kp Y>   ; key-positions = < 14 6 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
ar2_7 { bindings = <&kp X>   ; key-positions = < 14 7 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
ar2_8 { bindings = <&kp Z>   ; key-positions = < 14 8 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};
ar2_9 { bindings = <&kp B>   ; key-positions = < 14 9 >; timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 >;};

};

macros {
    num_shifted: num_shifted {
        label = "num_shifted";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings =
            <&macro_press>,
            <&mo NUM &kp LSHFT>,
            <&macro_pause_for_release>,
            <&macro_release>,
            <&mo NUM &kp LSHFT>;
        };
    esc_to_al1: esc_to_al1 {
        label = "esc_to_al1";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AL1 &kp ESC>;
    };
    esc_to_ar1: esc_to_ar1 {
        label = "esc_to_ar1";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AR1 &kp ESC>;
    };
    to_eng: to_eng {
        label = "to_eng";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AL1 &kp LC(LS(N1))>;
    };
    to_eng_lock: to_eng_lock {
        label = "to_eng_lock";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AL1 &kp LC(LS(N1)) &kp LG(L)>;
    };
    to_rus: to_rus {
        label = "to_rus";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AR1 &kp LC(LS(N3))>;
    };
    sl_al2: sl_al2 {
        label = "sl_al2";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AL2>;
    };
};

behaviors {
    td_copy_cut: tap_dance_copy_cut {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_COPY_CUT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp LC(C)>, <&kp LC(X)>;
    };
    bspc_del: backspace_delete {
        compatible = "zmk,behavior-mod-morph";
        label = "BACKSPACE_DELETE";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp DELETE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
};




keymap { compatible = "zmk,keymap";
// ======================================================================= ALPHA =======================================================================================
alpha1 {label = "Alpha 1"; bindings = <
                      &mt LCTL L         &mt LALT G    &mt LGUI D       _____ _____ _____                 
    &mt LSHFT I       &lt NUM R          &lt FUN S     &lt NAV T        _____ _____ _____ _____
                                         &lt AR1 SPACE &mo AL2          _____ _____
    >;};
alpha2 {label = "Alpha 2"; bindings = <
                      &kp V              &kp W         &kp M            _____ _____ _____                   
    &kp Q             &kp J              &kp P         &kp K            _____ _____ _____ _____
                                         _____         _____            _____ _____
    >;};
alpha3 {label = "Alpha 3"; bindings = <
                      &kp SQT            &kp LBKT      &kp RBKT         _____ _____ _____                 
    &kp GRAVE         &kp DOT            &kp COMMA     &kp SEMI         _____ _____ _____ _____
                                         _____         _____            _____ _____
    >;};
alpha1right {label = "Alpha 1R"; bindings = <
                      &kp O              &kp U         &kp H            _____ _____ _____         
    &kp C             &kp A              &kp E         &kp N            _____ _____ _____ _____
                                         _____         _____            _____ _____
    >;}; 
alpha2right {label = "Alpha 2R"; bindings = <
                      &kp FSLH           &kp BSLH      &kp F            _____ _____ _____
    &kp Y             &kp X              &kp Z         &kp B            _____ _____ _____ _____
                                         _____         _____            _____ _____
    >;};
numbers1 {label = "Num1"; bindings = <
                   &sk LSHFT         &kp MINUS         &kp N5           _____ _____ _____
    &kp N1         &kp N2            &kp N3            &kp N4           _____ _____ _____ _____
                                     &mo NUM           &mo NUM2        _____ _____ 
    >;};
numbers2 {label = "Num2"; bindings = <
                   &sk LSHFT         &kp EQUAL         &kp N6           _____ _____ _____
    &kp N0         &kp N9            &kp N8            &kp N7           _____ _____ _____ _____
                                     _____             _____            _____ _____ 
    >;};

navigation {
    label = "Nav";
    bindings = <
                      &sk LCTL           &sk LALT      &sk LGUI                                    &kp PG_DN         &kp UP          &kp PG_UP             
    &sk LSHFT         &caps_word         &kp HOME      &kp END                                     &kp LEFT          &kp DOWN        &kp RIGHT        &bspc_del
                                                       &kp SPC       _____            _____        &mt LSHFT SPC
    >;
};

function {
    label = "Fns";
    bindings = <
                      &kp LCTL           &kp LALT      &mt LGUI F5                                 &mtr LGUI F6      &mtr LALT F11   &mtr LCTL F12         
    &mt LSHFT F1      &kp F2             &kp F3        &kp F4                                      &kp F7            &kp F8          &kp F9           &mtr RSHFT F10
                                                       &kp K_APP     &kp PRINTSCREEN  &kp C_EJECT  &mo SYS
    >;
};
system {
    label = "Sys";
    bindings = <
                      _____              _____         &bt BT_SEL 0                                &kp C_MUTE        &kp C_VOL_DN    &kp C_VOL_UP          
    &kp C_BRI_DN      &kp C_BRI_UP       &bt BT_PRV    &bt BT_NXT                                  &kp C_PREV        &kp C_PP        &kp C_NEXT            
                                                       &bt BT_CLR    &bootloader      &bootloader  _____                                                                      
    >;
};
    };
};