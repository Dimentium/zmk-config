/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layers
#define COLEMAK 0
#define RULEMAK 1
#define EXT     2
#define NAV     3
#define FUN     4

#define A_RU F
#define B_RU COMMA
#define C_RU W
#define D_RU L
#define E_RU T
#define F_RU A
#define G_RU U
#define H_RU LBKT
#define I_RU B
#define J_RU Q    // ij
#define K_RU R
#define L_RU K
#define M_RU V
#define N_RU Y
#define O_RU J
#define P_RU G
#define Q_RU DOT  // yu
#define R_RU H
#define S_RU C
#define T_RU N
#define U_RU E
#define V_RU D
#define W_RU SEMI // zh
#define X_RU Z    // ya
#define Y_RU S
#define Z_RU P
#define CH_RU   X
#define SH_RU   I
#define SCH_RU  O
#define SOFT_RU M
#define HARD_RU RBKT
#define JO_RU   GRAVE
#define JE_RU   SQT

#define COMMA_RU    LS(FSLH)
#define DOT_RU      FSLH

// Bindings
#define _____ &none
#define SHFTSPC &rt LSHFT SPC
#define HYPER LA(LG(LCTRL)) 0

#define TAPPING_TERM 300
#define COMBO_TIMEOUT 50

&sk {
    release-after-ms = <1500>;
    quick-release;
};
&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "balanced";
 };
&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "balanced";
 };

/ {
combos {
    compatible = "zmk,combos";
    lock {
        bindings = <&kp LG(LC(Q))>;
        key-positions = < 11 23 35 >;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    btclr {
        bindings = <&bt BT_CLR>;
        key-positions = < 0 12 24 >;
        timeout-ms = < COMBO_TIMEOUT >;
    };

    left_escape {
        bindings = <&kp ESC>;
        key-positions = <2 3>;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    right_escape {
        bindings = <&kp ESC>;
        key-positions = <8 9>;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    left_enter {
        bindings = <&kp ENTER>;
        key-positions = <14 15>;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    right_enter {
        bindings = <&kp ENTER>;
        key-positions = <20 21>;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    right_bspc {
        bindings = <&kp BACKSPACE>;
        key-positions = <8 21>;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    right_del {
        bindings = <&kp DELETE>;
        key-positions = <8 19>;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    right_tab {
        bindings = <&kp TAB>;
        key-positions = <7 8>;
        timeout-ms = < COMBO_TIMEOUT >;
    };

    copy_cut {
        bindings = <&td_copy_cut>;
        key-positions = < 14 16 >;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    paste {
        bindings = <&kp LG(V)>;
        key-positions = < 2 4 >;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    undo {
        bindings = <&kp LG(Z)>;
        key-positions = < 13 16 >;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    redo {
        bindings = <&kp LS(LG(Z))>;
        key-positions = < 1 4 >;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    
    to_rus {
        bindings = <&to_rulemak>;
        key-positions = < 7 8 9 >;
        timeout-ms = < COMBO_TIMEOUT >;
    };
    to_eng {
        bindings = <&to_colemak>;
        key-positions = < 2 3 4 >;
        timeout-ms = < COMBO_TIMEOUT >;
    };

    rus_ch {
        bindings = <&kp CH_RU>;
        key-positions = < 2 15 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < RULEMAK >;
    };
    rus_sh {
        bindings = <&kp SH_RU>;
        key-positions = < 15 26 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < RULEMAK >;
    };
    rus_sch {
        bindings = <&kp SCH_RU>;
        key-positions = < 15 28 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < RULEMAK >;
    };
    rus_jo {
        bindings = <&kp JO_RU>;
        key-positions = < 7 22 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < RULEMAK >;
    };
    rus_je {
        bindings = <&kp JE_RU>;
        key-positions = < 9 20 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < RULEMAK >;
    };
    rus_soft {
        bindings = <&kp SOFT_RU >;
        key-positions = < 20 31 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < RULEMAK >;
    };
    rus_hard {
        bindings = <&kp HARD_RU >;
        key-positions = < 20 33 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < RULEMAK >;
    };
    en_semi {
        bindings = <&kp SEMI >;
        key-positions = < 32 33 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < COLEMAK >;
    };
    ru_semi {
        bindings = <&semi_ru >;
        key-positions = < 32 33 >;
        timeout-ms = < COMBO_TIMEOUT >;
        layers = < RULEMAK >;
    };

};

macros {
    to_colemak: to_colemak {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings =
            <&macro_press    &kp LCTL &kp LSHFT>,
            <&macro_tap      &kp N1 &to COLEMAK>,
            <&macro_release  &kp LCTL &kp LSHFT>;
    };
    to_rulemak: to_rulemak {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings =
            <&macro_press    &kp LCTL &kp LSHFT>,
            <&macro_tap      &kp N3 &to RULEMAK>,
            <&macro_release  &kp LCTL &kp LSHFT>;
    };
};

behaviors {
    td_copy_cut: tap_dance_copy_cut {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp LG(C)>, <&kp LG(X)>;
    };

    rt: rt {
        compatible = "zmk,behavior-hold-tap";
        label = "retro-mod-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        retro-tap;
    };

    comma_ru: comma_semi_ru {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp COMMA_RU>, <&kp LA(COMMA)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dot_ru: dot_colon_ru {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp DOT_RU>, <&kp LA(DOT)>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    semi_ru: semi_colon_ru {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp LS(N4)>, <&kp N6>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    sqt_ru: sqt_ru {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp LA(O)>, <&kp N2 >;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    fslh_ru: fslh_ru {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp KP_DIVIDE>, <&kp N7 >;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    };
};
};

/ {
keymap { compatible = "zmk,keymap";

colemak { bindings = <
&kp LGUI      &kp Q         &kp W         &kp F         &kp P         &kp B              &kp J         &kp L            &kp U           &kp Y      &kp SQT       &kp LGUI
&kp LCTRL     &kp A         &kp R         &kp S         &kp T         &kp G              &kp M         &kp N            &kp E           &kp I      &kp O         &kp LCTRL
&kp LALT      &kp Z         &kp X         &kp C         &kp D         &kp V              &kp K         &kp H            &kp COMMA       &kp DOT    &kp FSLH      &kp LALT
                                          &kp LGUI      &lt EXT SPC         &rt LSHFT SPC              &lt NAV SPC      &kp LALT
>;};

rulemak { bindings = <
&kp LGUI      &kp Q_RU      &kp V_RU      &kp B_RU      &kp P_RU      &kp F_RU           &kp J_RU      &kp L_RU         &kp U_RU        &kp Y_RU   &sqt_ru       &kp LGUI
&kp LCTRL     &kp A_RU      &kp R_RU      &kp S_RU      &kp T_RU      &kp G_RU           &kp M_RU      &kp N_RU         &kp E_RU        &kp I_RU   &kp O_RU      &kp LCTRL
&kp LALT      &kp Z_RU      &kp X_RU      &kp C_RU      &kp D_RU      &kp W_RU           &kp H_RU      &kp K_RU         &comma_ru       &dot_ru    &fslh_ru      &kp LALT
                                          &kp LGUI      &lt EXT SPC         &rt LSHFT SPC              &lt NAV SPC      &kp LALT
>;};

extended { bindings = <
&kp EQUAL     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5             &kp N6        &kp N7           &kp N8          &kp N9          &kp N0        &kp MINUS
&kp LS(EQUAL) &kp LS(N1)    &kp LS(N2)    &kp LS(N3)    &kp LS(N4)    &kp LS(N5)         &kp LS(N6)    &kp LS(N7)       &kp LS(N8)      &kp LS(N9)      &kp LS(N0)    &kp LS(MINUS)
&kp LALT      &sk LSHFT     &sk LCTRL     &sk LALT      &sk LGUI      &kp NUHS           &kp NUBS      &kp GRAVE        &kp BSLH        &kp LBKT        &kp RBKT      &kp LALT
                                          &none         &none               &rt LSHFT SPC              &none            &none  
>;};

navigation { bindings = <
&none         &kp C_EJECT   &none         &none         &none         &none              &kp PG_UP     &kp HOME         &kp UP          &kp END          &kp DEL         &none
&none         &kp LSHFT     &kp LCTRL     &kp LALT      &kp LGUI      &kp K_APP          &kp PG_DN     &kp LEFT         &kp DOWN        &kp RIGHT        &kp BSPC        &none
&none         &none         &none         &none         &none         &none              &kp INS       &kp TAB          &none           &none            &none           &none
                                          &none         &mo FUN             &rt LSHFT SPC              &none            &none
>;};

function { bindings = <
&bt BT_SEL 0  &kp F1        &kp F2        &kp F3        &kp F4        &bt BT_SEL 3       &kp KP_NUM    &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp CAPS        &none
&bt BT_SEL 1  &kp F5        &kp F6        &kp F7        &kp F8        &bt BT_SEL 4       &none         &kp LGUI         &kp LALT        &kp LCTRL        &kp LSHFT       &none
&bt BT_SEL 2  &kp F9        &kp F10       &kp F11       &kp F12       &bt BT_CLR         &sys_reset    &kp C_PLAY_PAUSE &kp C_VOL_DN    &kp C_VOL_UP     &kp C_MUTE      &bootloader
                                          &none         &none                   &none                  &none            &none  
>;};
};};
