/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layers
#define COLEMAK 0
#define QWERTY  1
#define ISRT    2
#define EXT     3
#define NAV     4
#define FUN     5
#define SYSTEM  6

#define BV_AL1   7
#define BV_AL2   8
#define BV_AL3   9
#define BV_NUM   10
#define BV_NAV   11
#define BV_FUN   12
#define BV_HOT   13

// Bindings
#define _____ &none

#ifndef NUBS
  #define NUBS NON_US_BSLH
#endif

#define KP_STAR KP_ASTERISK

#ifndef KP_NUM
  #define KP_NUM KP_NUMLOCK
#endif

#define MUP MOVE_UP
#define MDOWN MOVE_DOWN
#define MLEFT MOVE_LEFT
#define MRIGHT MOVE_RIGHT
#define SUP SCROLL_UP
#define SDOWN SCROLL_DOWN
#define SLEFT SCROLL_LEFT
#define SRIGHT SCROLL_RIGHT

#define MUP2 MOVE_VERT(-1600)
#define MDOWN2 MOVE_VERT(1600)
#define MLEFT2 MOVE_HOR(-1600)
#define MRIGHT2 MOVE_HOR(1600)

&sk {
    release-after-ms = <1500>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";
        lock {
            bindings = <&kp LG(L)>;
            key-positions = < 9 19 29 >;
            layers = < 0 1 2 BV_AL1 >;
            timeout-ms = <50>;
        };
        mo_fun {
            bindings = <&mo FUN>;
            key-positions = <30 33>;
            timeout-ms = <50>;
            layers = < 0 1 2 >;
        };
        left_escape {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };
        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <11 12>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };
        right_escape {
            bindings = <&kp ESC>;
            key-positions = <7 8>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };
        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <17 18>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        bv_enter {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
            timeout-ms = <20>;
            layers = < BV_AL1 >;
        };
        bv_left_escape {
            bindings = <&kp ESC>;
            key-positions = <17 18>;
            timeout-ms = <20>;
            layers = < BV_AL1 >;
        };
        bv_right_escape {
            bindings = <&kp ESC>;
            key-positions = <11 12>;
            timeout-ms = <20>;
            layers = < BV_AL1 >;
        };
    };

    macros {
        ext_shifted: ext_shifted {
            label = "ext_shifted";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press>,
                <&mo EXT &kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo EXT &kp LSHFT>;
        };

        bv_num_shifted: bv_num_shifted {
            label = "bv_num_shifted";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press>,
                <&mo BV_NUM &kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo BV_NUM &kp LSHFT>;
        };
        bv_al2_shifted: bv_al2_shifted {
            label = "bv_al2_shifted";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press &mo BV_AL2 &kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release &mo BV_AL2 &kp LSHFT>;
        };
        bv_al3_shifted: bv_al3_shifted {
            label = "bv_al3_shifted";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press &mo BV_AL3 &kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release &mo BV_AL3 &kp LSHFT>;
        };

        sl_al2: sl_al2 {
            label = "sl_al2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&sl BV_AL2>;
        };
        sl_al3: sl_al3 {
            label = "sl_al3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&sl BV_AL3>;
        };
    };

    behaviors {
        td_nav: tap_dance_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NAV";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mo NAV>,
                <&mo FUN>;
        };
        td_ext: tap_dance_ext {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EXT";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mo EXT>,
                <&ext_shifted>;
        };
        td_num: tap_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NUM";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mo BV_NUM>,
                <&bv_num_shifted>;
        };
        td_al2: tap_al2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_AL2";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&sl_al2>,
                <&mo BV_AL2>;
        };
        td_al3: tap_al3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_AL3";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&sl_al3>,
                <&mo BV_AL3>;
        };
        mtl: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;                         // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 >;    // <---[[right-hand keys]]
        };
        mtr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 >;    // <---[[left-hand keys]]
        };
    

        mol: homerow_layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_L";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = < 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 >;    // <---[[right-hand keys]]
        };
        mor: homerow_layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_R";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = < 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 >;    // <---[[left-hand keys]]
        };

        ht: holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "holdtap";
            #binding-cells = <2>;
            // tapping_term_ms = <135>;
            tapping-term-ms = <190>;
            // quick_tap_ms = <0>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
  &kp Q         &kp W     &kp F      &kp P           &kp B              &kp J       &kp L           &kp U        &kp Y    &kp SEMI
  &kp A         &kp R     &kp S      &kp T           &kp G              &kp M       &kp N           &kp E        &kp I    &kp O
  &kp Z         &kp X     &kp C      &kp D           &kp V              &kp K       &kp H           &kp COMMA    &kp DOT  &kp FSLH
                                     &kp SPC         &td_ext            &none       &td_nav
            >;
        };

        qwerty {
            bindings = <
  &kp Q         &kp W     &kp E      &kp R           &kp T              &kp Y       &kp U           &kp I        &kp O    &kp P
  &kp A         &kp S     &kp D      &kp F           &kp G              &kp H       &kp J           &kp K        &kp L    &kp SEMI
  &kp Z         &kp X     &kp C      &kp V           &kp B              &kp N       &kp M           &kp COMMA    &kp DOT  &kp FSLH
                                     &kp SPC         &td_ext            &none       &td_nav
            >;
        };

        isrtgp {
            bindings = <
  &kp Y         &kp C     &kp L      &kp M           &kp K              &kp Z       &kp F           &kp U        &kp COMMA &kp SEMI
  &kp I         &kp S     &kp R      &kp T           &kp G              &kp P       &kp N           &kp E        &kp A     &kp O
  &kp Q         &kp V     &kp W      &kp D           &kp J              &kp B       &kp H           &kp FSLH     &kp DOT   &kp X
                                     &kp SPC         &td_ext            &none       &td_nav
            >;
        };
        
        extended {
            bindings = <
  &sk LGUI      &sk LALT  &sk LCTRL  &sk LSHFT       &sk F19            &kp NUBS    &kp MINUS       &kp EQUAL    &kp LBKT  &kp RBKT
  &mtl LGUI N1  &kp N2    &kp N3     &mtl LSHIFT N4  &kp N5             &kp N6      &mtr LSHIFT N7  &kp N8       &kp N9    &mtr LGUI N0
  &sk RGUI      &sk RALT  &sk RCTRL  &sk RSHFT       &kp LG(SPACE)      &kp GRAVE   &kp SQT         &kp COMMA    &kp DOT   &kp BSLH
                                     &none           &none              &kp F19     &kp SPACE
            >;
        };

        navigation {
            bindings = <
  &kp C_EJECT   &none     &none      &none           &none              &kp HOME    &kp PG_DN       &kp PG_UP    &kp END          &kp DEL
  &kp LGUI      &kp LALT  &kp LCTRL  &kp LSHIFT      &kp K_APP          &kp LEFT    &kp DOWN        &kp UP       &kp RIGHT        &kp BSPC
  &none         &none     &none      &none           &none              &kp INS     &kp TAB         &kp LA(ESC)  &kp LA(LS(ESC))  &kp LA(LC(TAB))
                                     &kp SPACE       &mo FUN            &none       &none
            >;
        };

        function {
            bindings = <
  &kp F1        &kp F2    &kp F3     &kp F4          &none              &kp KP_NUM  &kp PRINTSCREEN   &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp CAPS
  &kp F5        &kp F6    &kp F7     &kp F8          &to SYSTEM         &none       &kp LSHFT         &kp LCTRL       &kp LALT         &kp LGUI
  &kp F9        &kp F10   &kp F11    &kp F12         &none              &to SYSTEM  &kp C_PLAY_PAUSE  &kp C_VOL_DN    &kp C_VOL_UP     &kp C_MUTE
                                     &none           &none              &none       &none
            >;
        };

        system {
            bindings = <
  &none         &none        &none        &none        &reset           &reset      &none          &none        &none        &none
  &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &none       &to 0          &to 1        &to 2        &to BV_AL1
  &bt BT_CLR    &none        &none        &none        &bootloader      &bootloader &none          &none        &none        &none
                                          &none        &none            &none       &none
            >;
        };

// --------------------------------------------------------------------------------------------------------------------------------------------
// Ben Vallack 18-keys layout
// --------------------------------------------------------------------------------------------------------------------------------------------

        bv_alpha1 {
            bindings = <
                _____             _____              _____         _____         _____            _____        _____             _____           _____            &to COLEMAK
                _____             &mtl LCTL L        &mtl LALT G   &mtl LGUI D   _____            _____        &mtr LGUI H       &mtr LALT U     &mtr LCTL O      _____
                &mtl LSHFT I      &mol BV_NUM S      &mol BV_FUN R &mol BV_NAV T _____            _____        &mor BV_NAV N     &mor BV_FUN E   &mor BV_NUM A    &mtr RSHFT C
                                                                   &kp SPC       &kp LA(LG(LSHIFT))          &td_al3      &td_al2
            >;
        };

        bv_alpha2 {
            bindings = <
                _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                _____             &kp V              &kp W         &kp M         _____            _____        &kp F             &kp SEMI        &kp SQT          _____
                &kp Q             &kp J              &kp P         &kp K         _____            _____        &kp B             &kp Z           &kp X            &kp Y
                                                                   &to BV_AL1    &key_repeat      _____        _____
            >;
        };

        bv_alpha3 {
            bindings = <
                _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                &kp GRAVE         &kp SQT            &kp LBKT      &kp RBKT      _____            _____        &kp BSLH          &kp COMMA       &kp DOT          &kp FSLH
                                                                   &to BV_AL1    &key_repeat      _____        _____ 
            >;
        };

        bv_numbers {
            bindings = <
                _____          _____             _____             _____         _____            _____        _____             _____           _____            _____
                _____          &kp KP_STAR       &kp KP_PLUS       &kp N5        _____            _____        &kp N6            &kp MINUS       &kp EQUAL        _____
                &mtl LSHFT N1  &kp N2            &kp N3            &kp N4        _____            _____        &kp N7            &kp N8          &kp N9           &mtr RSHFT N0
                                                                   &kp SPC       _____            &mo BV_HOT   &kp SPC
            >;
        };

        bv_navigation {
            bindings = <
                _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                _____             &kp LCTL           &kp LALT      &kp LGUI      _____            _____        &kp PG_DN         &kp UP          &kp PG_UP        _____
                &kp LSHFT         &kp TAB            &kp HOME      &kp END       _____            _____        &kp LEFT          &kp DOWN        &kp RIGHT        &bspc_del
                                                                   &mo BV_HOT    _____            _____        _____
            >;
        };

        bv_function {
            bindings = <
                _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                _____             &kp LCTL           &kp LALT      &mtl LGUI F5  _____            _____        &mtr LGUI F6      &mtr LALT F11   &mtr LCTL F12    _____
                &mtl LSHFT F1     &kp F2             &kp F3        &kp F4        _____            _____        &kp F7            &kp F8          &kp F9           &mtr RSHFT F10
                                                     &kp C_PLAY_PAUSE            &kp C_VOL_DN     &kp C_VOL_UP &kp C_MUTE
            >;
        };

        bv_hotkeys {
            bindings = <
                _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                _____             &sk LCTL           &sk LALT      &sk LGUI      _____            _____        &sk RGUI          &sk RALT        &sk RCTL         _____
                &mtl LSHFT Z      &kp X              &kp C         &kp V         _____            _____        &kp Q             &kp W           &kp O            &kp RSHFT 
                                                                   _____         &kp F19          _____ 
            >;
        };
    };
};
