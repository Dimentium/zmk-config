/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

// Layers
#define DEFAULT 0
#define SECOND  1
#define THIRD   2
#define EXT     3
#define NAV     4
#define FUN     5
#define MICE    6
#define MICE2   7
#define ROUTE   8

#define AL1 9
#define AL2 10
#define SM1 11
#define SM2 12
#define NUM 13
#define SYS 14
#define AFUN 15
#define ALU2 16

// Bindings
#define _____ &none

#define MUP MOVE_UP
#define MDOWN MOVE_DOWN
#define MLEFT MOVE_LEFT
#define MRIGHT MOVE_RIGHT
#define SUP SCROLL_UP
#define SDOWN SCROLL_DOWN
#define SLEFT SCROLL_LEFT
#define SRIGHT SCROLL_RIGHT

#define MUP2 MOVE_VERT(-1600)
#define MDOWN2 MOVE_VERT(1600)
#define MLEFT2 MOVE_HOR(-1600)
#define MRIGHT2 MOVE_HOR(1600)

&sk {
    release-after-ms = <1500>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";
        lock {
            bindings = <&kp LG(L)>;
            key-positions = <9 19 29>;
            layers = <0 1 2>;
            timeout-ms = <50>;
        };
        left_escape {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };
        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <11 12>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };
        right_escape {
            bindings = <&kp ESC>;
            key-positions = <7 8>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };
        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <17 18>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };
        al_enter {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
            timeout-ms = <20>;
            layers = < AL1 >;
        };

        al_escape {
            bindings = <&kp ESC>;
            key-positions = <17 18>;
            timeout-ms = <20>;
            layers = < AL1 >;
        };
    };

    macros {
        mk_shifted: mk_shifted {
            label = "mk_shifted";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press>,
                <&mo EXT &kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo EXT &kp LSHFT>;
        };
        mk_to: mk_to {
            label = "mk_to";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_tap &to ROUTE>,
                <&macro_pause_for_release>,
                <&macro_tap &to DEFAULT>;
        };

        mk_a2u: mk_a2u {
            label = "mk_a2u";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press>,
                <&mo AL2 &kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo AL2 &kp LSHFT>;
        };
    };

    behaviors {
        td_nav: tap_dance_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NAV";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mo NAV>,
                <&mo FUN>;
        };
        td_ext: tap_dance_ext {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EXT";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mo EXT>,
                <&sk F19>;
                //<&mk_to>;
        };
        td_mod: tap_dance_mod {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&kp LSHFT>,
                <&kp LCTRL>;
        };
        lmt: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;                         // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 >;    // <---[[right-hand keys]]
        };
        rmt: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 >;    // <---[[left-hand keys]]
        };
    

        hl_l: homerow_layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_L";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = < 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 >;    // <---[[right-hand keys]]
        };
        hl_r: homerow_layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_R";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = < 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 >;    // <---[[left-hand keys]]
        };
        td_a2: tap_dance_a2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_A2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                < &sl AL2  >,
                < &sl ALU2 >;
        };
        td_num: tap_dance_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NUM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                < &kp LSHFT >,
                < &sl NUM >;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
  &kp Q         &kp W     &kp F      &kp P           &kp B              &kp J            &kp L           &kp U        &kp Y    &kp SEMI
  &lmt LGUI A   &kp R     &kp S      &lmt LSHIFT T   &kp G              &kp M            &rmt RSHIFT N   &kp E        &kp I    &rmt LGUI O
  &kp Z         &kp X     &kp C      &kp D           &kp V              &kp K            &kp H           &kp COMMA    &kp DOT  &kp FSLH
                                     &td_ext         &kp SPACE          &kp SPACE        &td_nav
            >;
        };

        qwerty {
            bindings = <
  &kp Q         &kp W     &kp E      &kp R           &kp T              &kp Y            &kp U           &kp I        &kp O    &kp P
  &lmt LGUI A   &kp S     &kp D      &lmt LSHIFT F   &kp G              &kp H            &rmt RSHIFT J   &kp K        &kp L    &rmt LGUI SEMI
  &kp Z         &kp X     &kp C      &kp V           &kp B              &kp N            &kp M           &kp COMMA    &kp DOT  &kp FSLH
                                     &td_ext         &kp SPACE          &kp SPACE        &td_nav
            >;
        };

        isrtgp {
            bindings = <
  &kp Y         &kp C     &kp L      &kp M           &kp K              &kp Z            &kp F           &kp U        &kp COMMA &kp SEMI
  &lmt LGUI I   &kp S     &kp R      &lmt LSHIFT T   &kp G              &kp P            &rmt RSHIFT N   &kp E        &kp A    &rmt LGUI O
  &kp Q         &kp V     &kp W      &kp D           &kp J              &kp B            &kp H           &kp COMMA    &kp DOT  &kp FSLH
                                     &td_ext         &kp SPACE          &kp SPACE        &td_nav
            >;
        };
        
        extended {
            bindings = <
  &sk LGUI      &sk LALT  &sk LCTRL  &sk LSHFT       &sk RALT           &kp NON_US_BSLH  &kp MINUS       &kp EQUAL    &kp LBKT  &kp RBKT
  &lmt LGUI N1  &kp N2    &kp N3     &lmt LSHIFT N4  &kp N5             &kp N6           &rmt LSHIFT N7  &kp N8       &kp N9    &rmt LGUI N0
  &sk RGUI      &sk RALT  &none      &none           &kp LG(SPACE)      &kp GRAVE        &kp SQT         &kp COMMA    &kp DOT   &kp BSLH
                                     &none           &kp SPACE          &td_mod          &none
            >;
        };

        navigation {
            bindings = <
  &none         &none     &none      &none           &none              &kp HOME         &kp PG_DN       &kp PG_UP    &kp END          &kp DEL
  &kp LGUI      &kp LALT  &kp LCTRL  &kp LSHIFT      &kp K_APP          &kp LEFT         &kp DOWN        &kp UP       &kp RIGHT        &kp BSPC
  &none         &none     &none      &none           &none              &kp INS          &kp TAB         &kp LA(ESC)  &kp LA(LS(ESC))  &kp LA(LC(TAB))
                                     &mo MICE        &kp SPACE          &none            &none
            >;
        };

        functional {
            bindings = <
  &kp F1        &kp F2    &kp F3     &kp F4          &to AL1            &kp KP_NUMLOCK   &kp PRINTSCREEN   &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp CAPS
  &kp F5        &kp F6    &kp F7     &kp F8          &reset             &reset           &kp LSHFT         &kp LCTRL       &kp LALT         &kp LGUI
  &kp F9        &kp F10   &kp F11    &kp F12         &bootloader        &bootloader      &kp C_PLAY_PAUSE  &kp C_VOL_DN    &kp C_VOL_UP     &kp C_MUTE
                                     &to 0           &to 1              &to 2            &none
            >;
        };

        mouse_navigation {
            bindings = <
  &none         &none     &none      &none           &none              &none            &mwh SLEFT      &mmv MUP     &mwh SRIGHT &mwh SUP
  &kp LGUI      &kp LALT  &kp LCTRL  &kp LSHIFT      &mo MICE2          &none            &mmv MLEFT      &mmv MDOWN   &mmv MRIGHT &mwh SDOWN
  &none         &none     &none      &none           &none              &none            &mkp LCLK       &mkp MCLK    &mkp RCLK   &none
                                     &none           &kp SPACE          &none            &none
            >;
        };

        mouse_accelerated {
            bindings = <
  &none         &none     &none      &none           &none              &none            &mwh SLEFT      &mmv MUP2    &mwh SRIGHT  &mwh SUP
  &kp LGUI      &kp LALT  &kp LCTRL  &kp LSHIFT      &none              &none            &mmv MLEFT2     &mmv MDOWN2  &mmv MRIGHT2 &mwh SDOWN
  &none         &none     &none      &none           &none              &none            &mkp LCLK       &mkp MCLK    &mkp RCLK    &none
                                     &none           &kp SPACE          &none            &none
            >;
        };

        route {
            bindings = <
    &none         &none     &none      &none           &none            &none      &none         &none     &none      &none
    &none         &kp N7    &none      &none           &none            &none      &none         &none     &none      &none
    &none         &none     &none      &none           &none            &none      &none         &none     &none      &none
                                       &to DEFAULT     &to DEFAULT      &to DEFAULT  &to DEFAULT
            >;
        };

// --------------------------------------------------------------------------------------------------------------------------------------------
// Ben Vallack 18-keys layout
// --------------------------------------------------------------------------------------------------------------------------------------------

        alpha1 {
            bindings = <
                _____        _____        _____        _____        _____            _____   _____        _____        _____        &to DEFAULT     
                _____        &lmt LCTL L  &lmt LALT G  &lmt LGUI D  _____            _____   &rmt RGUI H  &rmt LALT U  &rmt RCTL O  _____        
                &hl_l NUM I  &hl_l SM2 S  &hl_l SM1 R  &hl_l SYS T  &kp COMMA        &kp DOT &hl_r SYS N  &hl_r SM1 E  &hl_r SM2 A  &hl_r NUM C  
                                                       &td_num      &kp SPC          &kp LSHFT &td_a2
            >;
        };

        alpha2 {
            bindings = <
                _____        _____        _____        _____        _____            _____    _____   _____        _____        _____        
                _____        &kp V        &kp W        &kp M        _____            _____    &kp F   &kp X        &kp Z        _____           
                &kp Q        &kp J        &kp P        &kp K        _____            _____    &kp B   &kp COMMA    &kp DOT      &kp Y        
                                                       &trans       &trans           &trans   &trans
            >;
        };

        sym1 {
            bindings = <
                _____        _____        _____        _____        _____            _____   _____          _____        _____      _____       
                _____        &kp STAR     &kp LS(N3)   &kp DLLR     _____            _____   &kp LS(COMMA)  &kp LS(DOT)  &kp MINUS  _____       
                &kp BSLH     &kp GRAVE    &kp TILDE    &kp CARET    _____            _____   &kp LBKT       &kp RBKT     &kp PIPE   &kp SLASH   
                                                       &trans       &trans           &trans  &trans
            >;
        };
        
        sym2 {
            bindings = <
                _____        _____        _____        _____         _____           _____   _____         _____        _____        _____      
                _____        &kp ATSN     &kp QMARK    &kp LA(N3)    _____           _____   &kp LPRN      &kp RPRN     &kp MINUS    _____           
                &kp SEMI     &kp PRCNT    &kp EXCL     &kp LS(MINUS) _____           _____   &kp LBRC      &kp RBRC     &kp AMPS     &kp COLON  
                                                       &trans        &trans          &trans  &trans
            >;
        };

        num {
            bindings = <
                _____     _____                  _____            _____         _____        _____       _____          _____            _____            _____      
                _____     &lmt LCTL NON_US_BSLH  &lmt LALT GRAVE  &lmt LGUI N5  _____        _____       &rmt RGUI N6   &rmt LALT MINUS  &rmt RCTL EQUAL  _____      
                &kp N1    &kp N2                 &kp N3           &kp N4        &kp N5       &kp N6      &kp N7         &kp N8           &kp N9           &kp N0     
                                                                  &trans        &kp LSHIFT   &kp LSHIFT  &trans
            >;
        };

        sys {
            bindings = <
                _____    _____    _____             _____             _____           _____       _____       _____     _____      _____    
                _____    &kp ESC  &kp LG(LS(LBKT))  &kp LG(LS(RBKT))  _____           _____       &kp DEL     &kp UP    &kp BKSP   _____    
                &kp TAB  &kp DEL  &kp HOME          &kp END           _____           _____       &kp LEFT    &kp DOWN  &kp RIGHT  &kp RET  
                                                    &trans            &kp LSHIFT      &kp LSHIFT  _____
            >;
        };

        afun {
            bindings = <
                _____         _____    _____    _____   _____         _____   _____    _____    _____   _____         
                _____         &kp F11  &kp F10  &kp F1  _____         _____   &kp F2   &kp F3   &kp F4  _____              
                &kp C_VOL_DN  &kp F12  &kp F5   &kp F6  _____         _____   &kp F7   &kp F8   &kp F9  &kp C_VOL_UP  
                                                &trans  &to AL1       _____   &kp C_MUTE
            >;
        };

        alpha2cap {
            bindings = <
                _____      _____      _____      _____      _____         _____   _____      _____       _____      _____      
                _____      &kp LS(V)  &kp LS(W)  &kp LS(M)  _____         _____   &kp LS(F)  &kp LS(X)   &kp LS(Z)  _____      
                &kp LS(Q)  &kp LS(J)  &kp LS(P)  &kp LS(K)  _____         _____   &kp LS(B)  &kp LBKT    &kp RBKT   &kp LS(Y)  
                                                 &trans     &kp LSHIFT    &trans  _____
            >;
        };
    };
};
