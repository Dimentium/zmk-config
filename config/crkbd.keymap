/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define LCOL   0
#define LQWE   1
#define LEXT   2
#define LNAV   3
#define LFUN   4

/ {
    combos {
        compatible = "zmk,combos";

        lock {
            bindings = <&kp LG(L)>;
            key-positions = <11 23 35>
            layers = <0 1>;
            timeout-ms = <50>;
        };

        right_escape {
            bindings = <&kp ESC>;
            key-positions = <8 9>;
            timeout-ms = <20>;
            layers = <0 1>;
        };

        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            timeout-ms = <20>;
            layers = <0 1>;
        };

        left_tab {
            bindings = <&kp TAB>;
            key-positions = <26 27>;
            timeout-ms = <20>;
            layers = <0 1>;
        };

        left_escape {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            timeout-ms = <20>;
            layers = <0 1>;
        };

        left_ralt {
            bindings = <&sk RALT>;
            key-positions = <14 16 15>;
            timeout-ms = <20>;
            layers = <0 1>;
        };

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <14 15>;
            timeout-ms = <20>;
            layers = <0 1>;
        };

        sticky_nav {
            bindings = <&sl LNAV>;
            key-positions = <15 16>;
            timeout-ms = <20>;
            layers = <0 1>;
        };
    };

    macros {
        to_eng: to_eng {
            label = "to_eng";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to LCOL &kp LC(LS(N1))>;
        };
        to_rus: to_rus {
            label = "to_rus";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to LQWE &kp LC(LS(N2))>;
        };
        mk_shifted: mk_shifted {
            label = "mk_shifted";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings =
                <&macro_press>,
                <&mo LEXT &kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo LEXT &kp LSHFT>;
        };
        ZMK_MACRO(mk_lc_z,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp Z>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_x,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp X>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_c,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp C>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_v,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp V>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_y,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp Y>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_q,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp Q>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_w,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp W>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_e,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp E>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_r,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp R>, <&macro_release &kp LCTRL>;
        )
        ZMK_MACRO(mk_lc_t,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp T>, <&macro_release &kp LCTRL>;
        )
    };

    behaviors {
        td_nav: tap_dance_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NAV";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mo LNAV>,
                <&mo LFUN>;
        };
        td_ext: tap_dance_ext {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_EXT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mo LEXT>,
                <&mk_shifted>,
                <&mo LNAV>;
        };
        td_mod: tap_dance_mod {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LSHFT>,
                <&kp LCTRL>;
        };
        lmt: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
   //       hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 >;    // <---[[right-hand keys]]
        };
        rmt: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
   //       hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 >;    // <---[[left-hand keys]]
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
    &kp LALT   &kp Q   &kp W    &kp F     &kp P    &kp B            &kp J      &kp L    &kp U      &kp Y    &kp SEMI  &kp LALT
    &kp LSHFT  &kp A   &kp R    &kp S     &kp T    &kp G            &kp M      &kp N    &kp E      &kp I    &kp O     &kp RSHFT
    &kp LCTRL  &kp Z   &kp X    &kp C     &kp D    &kp V            &kp K      &kp H    &kp COMMA  &kp DOT  &kp FSLH  &kp LCTRL
                                &kp LGUI  &td_ext  &kp SPACE        &kp SPACE  &td_nav  &kp LGUI
            >;
        };
        
        qwerty {
            bindings = <
    &kp LALT   &kp Q   &kp W   &kp E     &kp R      &kp T            &kp Y       &kp U     &kp I      &kp O     &kp P     &kp LALT
    &kp LSHFT  &kp A   &kp S   &kp D     &kp F      &kp G            &kp H       &kp J     &kp K      &kp L     &kp SEMI  &kp RSHFT
    &kp LCTRL  &kp Z   &kp X   &kp C     &kp V      &kp B            &kp N       &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp LCTRL
                               &kp LGUI  &td_ext    &kp SPACE        &kp SPACE   &td_nav   &kp LGUI
            >;
        };

        exended {
            bindings = <
    &kp LALT   &kp Q     &sk RALT  &sk LCTRL  &kp R     &kp T      &kp NON_US_BSLH  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp LALT
    &kp LSHFT  &kp N1    &kp N2    &kp N3     &kp N4    &kp N5     &kp N6           &kp N7     &kp N8     &kp N9    &kp N0    &kp RSHFT
    &kp LCTRL  &mk_lc_z  &mk_lc_x  &mk_lc_c   &mk_lc_v  &none      &kp GRAVE        &kp SQT    &kp COMMA  &kp DOT   &kp BSLH  &kp LCTRL
                                   &kp LGUI   &none     &none      &td_mod          &td_nav    &kp LGUI
            >;
        };

        navigation {
            bindings = <
    &kp LALT   &to_eng   &to_rus   &none      &none       &none         &kp HOME   &kp PG_DN  &kp PG_UP    &kp END    &kp DEL   &kp LALT
    &kp LSHFT  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHIFT  &kp K_APP     &kp LEFT   &kp DOWN   &kp UP       &kp RIGHT  &kp BSPC  &kp RSHFT
    &kp LCTRL  &none     &none     &none      &none       &none         &kp INS    &kp TAB    &kp LS(TAB)  &kp ENTER  &kp ESC   &kp LCTRL
                                   &kp LGUI   &td_ext     &none         &none      &none      &kp LGUI
            >;
        };

        functional {
            bindings = <
    &none      &kp F1  &kp F2   &kp F3   &kp F4    &none          &kp KP_NUMLOCK  &kp PRINTSCREEN   &kp SCROLLLOCK    &kp PAUSE_BREAK  &kp CAPS  &none
    &kp LSHFT  &kp F5  &kp F6   &kp F7   &kp F8    &none          &none           &kp LSHFT         &kp LCTRL         &kp LALT         &kp LGUI  &kp RSHFT
    &none      &kp F9  &kp F10  &kp F11  &kp F12   &none          &none           &none             &kp K_PLAY_PAUSE  &kp K_MUTE       &none     &none
                                &none    &td_ext   &none          &none           &none             &none
            >;
        };
    };
};
