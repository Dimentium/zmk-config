/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// Layers
#define AL1   0
#define AL2   1
#define AL3   2
#define AR1   3
#define AR2   4
#define AR3   5
#define NUM   6
#define NAV   7
#define FUN   8
#define SYS   9
#define MYS  10

// Bindings
#define TAPPING_TERM    300  // tapping-term-ms = <300>;
#define QUICK_TAP_TERM  250  // tapping-term-ms = <300>;
#define COMBO_TIMEOUT_2  50  // timeout-ms for 2 fingers cofbos
#define COMBO_TIMEOUT_3  80  // timeout-ms for 2 fingers combos


#define LAT_MOD_MACRO(name, mod)                        \
name: name##_macro {                                    \
	label = #name;                                      \
	compatible = "zmk,behavior-macro";                  \
	#binding-cells = <0>;                               \
	wait-ms = <0>;                                      \
    bindings                                            \
        = <&macro_press &kp mod>                        \
        , <&macro_tap &to AL1>                          \
        , <&macro_pause_for_release>                    \
        , <&macro_tap &to AR1>                          \
        , <&macro_release &mo AL1 &kp mod>;             \
};
#define HOME_ROW_MOD_TAP_LEFT(name, macro)              \
name: name##_mod_tap {                                  \
    label = #name;                                      \
    compatible = "zmk,behavior-hold-tap";               \
    #binding-cells = <2>;                               \
    flavor = "tap-preferred";                           \
    tapping-term-ms = <TAPPING_TERM>;                   \
    quick-tap-ms = <QUICK_TAP_TERM>;                    \
    global-quick-tap;                                   \
    bindings = <macro>, <&kp>;                          \
    hold-trigger-key-positions = < RIGHT_HALF THUMBS >; \
};
#define HOME_ROW_MOD_TAP_RIGHT(name, macro)             \
name: name##_mod_tap {                                  \
    label = #name;                                      \
    compatible = "zmk,behavior-hold-tap";               \
    #binding-cells = <2>;                               \
    flavor = "tap-preferred";                           \
    tapping-term-ms = <TAPPING_TERM>;                   \
    quick-tap-ms = <QUICK_TAP_TERM>;                    \
    global-quick-tap;                                   \
    bindings = <macro>, <&kp>;                          \
    hold-trigger-key-positions = < LEFT_HALF THUMBS >;  \
};


&mt { tapping-term-ms  =  <100>; flavor = "tap-preferred"; };
&lt { tapping-term-ms  =  <250>; flavor = "tap-preferred"; };
&sk { release-after-ms = <1000>; quick-release; };

/ {
combos {
    compatible = "zmk,combos";
    to_eng             { key-positions = < KEY_R KEY_S KEY_T >; bindings = <&to_eng>;           timeout-ms = < COMBO_TIMEOUT_3 >; layers = < AL1 AR1 >; };   
    to_rus             { key-positions = < KEY_N KEY_E KEY_A >; bindings = <&to_rus>;           timeout-ms = < COMBO_TIMEOUT_3 >; layers = < AL1 AR1 >; };      
    lock               { key-positions = < KEY_L KEY_G KEY_D >; bindings = <&to_eng_lock>;      timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };

    shift_lock         { key-positions = < KEY_G KEY_S >;       bindings = <&kt LSHFT>;         timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    alt_esc            { key-positions = < KEY_I KEY_R >;       bindings = <&kp LA(ESC)>;       timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    shift_alt_esc      { key-positions = < KEY_I KEY_R >;       bindings = <&kp LS(LA(ESC))>;   timeout-ms = < COMBO_TIMEOUT_3 >; layers = < FUN >; };
    shift_alt_esc_2    { key-positions = < KEY_I KEY_R KEY_S >; bindings = <&kp LS(LA(ESC))>;   timeout-ms = < COMBO_TIMEOUT_3 >; layers = < AL1 AR1 >; };

    copy_cut           { key-positions = < KEY_R KEY_T >;       bindings = <&td_copy_cut>;      timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    paste              { key-positions = < KEY_L KEY_D >;       bindings = <&kp LG(V)>;         timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    undo               { key-positions = < KEY_I KEY_T >;       bindings = <&kp LG(Z)>;         timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    redo               { key-positions = < KEY_I KEY_T >;       bindings = <&kp LS(LG(Z))>;     timeout-ms = < COMBO_TIMEOUT_3 >; layers = < FUN >; };

    escape             { key-positions = < KEY_U KEY_O >;       bindings = <&kp ESC>;           timeout-ms = < COMBO_TIMEOUT_2 >; };
    escape_left_al1    { key-positions = < KEY_L KEY_G >;       bindings = <&esc_to_al1>;       timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AL2 AL3 >; };
    escape_left_ar1    { key-positions = < KEY_L KEY_G >;       bindings = <&esc_to_ar1>;       timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AR1 AR2 AR3 >; };
    enter              { key-positions = < KEY_E KEY_A >;       bindings = <&kp ENTER>;         timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 NAV >; };
    enter_left         { key-positions = < KEY_R KEY_S >;       bindings = <&kp ENTER>;         timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    backspace          { key-positions = < KEY_N KEY_U >;       bindings = <&bspc_del>;         timeout-ms = < COMBO_TIMEOUT_2 >; };
    backspace_left     { key-positions = < KEY_G KEY_T >;       bindings = <&bspc_del>;         timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    alt_backspace      { key-positions = < KEY_N KEY_U KEY_O >; bindings = <&kp LA(BACKSPACE)>; timeout-ms = < COMBO_TIMEOUT_3 >; layers = < AL1 AR1 >; };
    alt_backspace_left { key-positions = < KEY_L KEY_G KEY_T >; bindings = <&kp LA(BACKSPACE)>; timeout-ms = < COMBO_TIMEOUT_3 >; layers = < AL1 AR1 >; };
    delete             { key-positions = < KEY_U KEY_A >;       bindings = <&kp DEL>;           timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    delete_left        { key-positions = < KEY_G KEY_R >;       bindings = <&kp DEL>;           timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    tab                { key-positions = < KEY_H KEY_U >;       bindings = <&kp TAB>;           timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
    tab_left           { key-positions = < KEY_G KEY_D >;       bindings = <&kp TAB>;           timeout-ms = < COMBO_TIMEOUT_2 >; layers = < AL1 AR1 >; };
};

macros {
    num_shifted: num_shifted {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings =
            <&macro_press>,
            <&mo NUM &kp LSHFT>,
            <&macro_pause_for_release>,
            <&macro_release>,
            <&mo NUM &kp LSHFT>;
        };
    esc_to_al1: esc_to_al1 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AL1 &kp ESC>;
    };
    esc_to_ar1: esc_to_ar1 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AR1 &kp ESC>;
    };
    to_eng: to_eng {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings =
            <&macro_press    &kp LCTL &kp LSHFT>,
            <&macro_tap      &kp N1 &to AL1>,
            <&macro_release  &kp LCTL &kp LSHFT>;
        };
    // to_eng: to_eng {
    //     compatible = "zmk,behavior-macro";
    //     #binding-cells = <0>;
    //     bindings = <&to AL1 &kp LC(LS(N1))>;
    // };
    to_eng_lock: to_eng_lock {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to AL1 &kp LC(LS(N1)) &kp LC(LG(Q))>;
    };
    to_rus: to_rus {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings =
            <&macro_press    &kp LCTL &kp LSHFT>,
            <&macro_tap      &kp N3 &to AR1>,
            <&macro_release  &kp LCTL &kp LSHFT>;
        };
    sl_al2: sl_al2 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AL2>;
    };
    sl_al3: sl_al3 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AL3>;
    };
    sl_ar2: sl_ar2 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AR2>;
    };
    sl_ar3: sl_ar3 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        bindings = <&sl AR3>;
    };

    LAT_MOD_MACRO(lalt, LALT)
    LAT_MOD_MACRO(lgui, LGUI)
    LAT_MOD_MACRO(lctl, LCTRL)
    LAT_MOD_MACRO(ralt, LALT)
    LAT_MOD_MACRO(rgui, LGUI)
    LAT_MOD_MACRO(rctl, LCTRL)
};

behaviors {
    HOME_ROW_MOD_TAP_LEFT(l_alt, &lalt)
    HOME_ROW_MOD_TAP_LEFT(l_gui, &lgui)
    HOME_ROW_MOD_TAP_LEFT(l_ctl, &lctl)
    HOME_ROW_MOD_TAP_RIGHT(r_alt, &ralt)
    HOME_ROW_MOD_TAP_RIGHT(r_gui, &rgui)
    HOME_ROW_MOD_TAP_RIGHT(r_ctl, &rctl)


    mtl: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        flavor = "tap-preferred";
        // flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < RIGHT_HALF THUMBS >;    // <---[[right-hand keys]]
    };
    mtr: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        flavor = "tap-preferred";
        // flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < LEFT_HALF THUMBS >;    // <---[[left-hand keys]]
    };

    msl: homerow_shift_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        // flavor = "tap-preferred";
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < RIGHT_HALF THUMBS >;    // <---[[right-hand keys]]
    };
    msr: homerow_shift_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        // flavor = "tap-preferred";
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < LEFT_HALF THUMBS >;    // <---[[left-hand keys]]
    };

    mol: homerow_layers_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        // flavor = "tap-preferred";
        flavor = "balanced";
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = < RIGHT_HALF THUMBS >;    // <---[[right-hand keys]]
    };
    mor: homerow_layers_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = < TAPPING_TERM >;
        quick-tap-ms = < QUICK_TAP_TERM >;
        // flavor = "tap-preferred";
        flavor = "balanced";
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = < LEFT_HALF THUMBS >;    // <---[[left-hand keys]]
    };
    td_copy_cut: tap_dance_copy_cut {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&kp LG(C)>, <&kp LG(X)>;
    };
    bspc_del: backspace_delete {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp DELETE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
};

keymap {
    compatible = "zmk,keymap";

// ======================================================================= ALPHA =======================================================================================
alpha1 {
    bindings = <
    _____             &mtl LCTL L        &mtl LALT G   &mtl LGUI D   _____            _____        &mtr LGUI H       &mtr LALT U     &mtr LCTL O      _____  
    &msl LSHFT I      &mol NUM R         &mol FUN S    &mol MYS T    _____            _____        &mor NAV N        &mor FUN E      &mor NUM A       &msr RSHFT C
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &lt NAV SPC   &num_shifted     &sl_al3      &sl_al2
    >;
};
alpha2 {
    bindings = <
    _____             &kp V              &kp W         &kp M         _____            _____        &kp F             &kp NUBS        &kp MINUS        _____
    &kp Q             &kp J              &kp P         &kp K         _____            _____        &kp B             &kp Z           &kp X            &kp Y
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp SPC       &none            &to AL1      &none
    >;
};
alpha3 {
    bindings = <
    _____             &kp LS(SQT)        &kp LS(LBKT)  &kp LS(RBKT)  _____            _____        &kp LS(BSLH)      &kp SEMI        &kp LS(SEMI)     _____
    &kp GRAVE         &kp SQT            &kp LBKT      &kp RBKT      _____            _____        &kp BSLH          &kp COMMA       &kp DOT          &kp FSLH
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp SPC       &none            &none        &to AL1 
    >;
};

// ======================================================================= ALPHA RUS =======================================================================================

alpha1rus {
    bindings = <
    _____             &l_ctl 0 K         &l_alt 0 D    &l_gui 0 L   _____            _____        &r_gui 0 V        &r_alt 0 E      &r_ctl 0 J       _____
    &msl LSHFT B      &mol NUM H         &mol FUN C    &mol MYS N   _____            _____        &mor NAV Y        &mor FUN T      &mor NUM F       &msr RSHFT R
    _____             _____              _____         _____        _____            _____        _____             _____           _____            _____
                                                       &lt NAV SPC   &num_shifted     &sl_ar3      &sl_ar2
    >;
};
alpha2rus {
    bindings = <
    _____             &kp SEMI           &kp U         &kp LBKT      _____            _____        &kp A             &kp X           &kp MINUS        _____
    &kp DOT           &kp Q              &kp G         &kp W         _____            _____        &kp COMMA         &kp P           &kp M            &kp S
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp SPC       &none            &to AR1      &none
    >;
};
alpha3rus {
    bindings = <
    _____             &none              &none         &kp RBKT      _____            _____        &kp NUBS          &kp LS(N4)      &kp LS(N6)       _____
    &kp GRAVE         &kp SQT            &kp I         &kp O         _____            _____        &kp BSLH          &kp LS(FSLH)    &kp FSLH         &kp Z
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp SPC       &none            &none        &to AR1 
    >;
};

// ======================================================================= ADDINIONAL =======================================================================================

numbers {
    bindings = <
    _____          &kp KP_DIVIDE     &kp KP_PLUS       &kp N5        _____            _____        &kp N6            &kp MINUS       &kp EQUAL        _____
    &kp N1         &kp N2            &kp N3            &kp N4        _____            _____        &kp N7            &kp N8          &kp N9           &kp N0
    _____          _____             _____             _____         _____            _____        _____             _____           _____            _____
                                                       &mt LSHFT SPC &kp RALT         &kp COMMA    &kp DOT
    >;
};

navigation {
    bindings = <
    _____             &kp LCTL           &kp LALT      &kp LGUI      _____            _____        &kp PG_DN         &kp UP          &kp PG_UP        _____
    &kp LSHFT         &kp TAB            &kp HOME      &kp END       _____            _____        &kp LEFT          &kp DOWN        &kp RIGHT        &bspc_del
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &none         &mo SYS          &none        &mt LSHFT SPC
    >;
};

function {
    bindings = <
    _____             &kp LCTL           &kp LALT      &mtl LGUI F5  _____            _____        &mtr LGUI F6      &mtr LALT F11   &mtr LCTL F12    _____
    &mtl LSHFT F1     &kp F2             &kp F3        &kp F4        _____            _____        &kp F7            &kp F8          &kp F9           &mtr RSHFT F10
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &kp C_EJECT   &kp PRINTSCREEN  &kp K_APP    &mo SYS
    >;
};

system {
    bindings = <
    _____             &kp C_BRI_UP       &bt BT_SEL 3  &bt BT_SEL 4  _____            _____        &kp C_MUTE        &kp C_VOL_DN    &kp C_VOL_UP     _____
    &kp C_BRI_DN      &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2  _____            _____        &kp C_PREV        &kp C_PP        &kp C_NEXT       &none
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &bt BT_DISC 1 &bt BT_CLR       &bootloader  &bt BT_CLR                                                                      
    >;
};

mouse {
    bindings = <
    _____             &kp LCTL           &kp LALT      &kp LGUI      _____            _____        &msc SCRL_DOWN    &mmv MOVE_UP    &msc SCRL_UP     _____
    &kp LSHFT         &none              &none         &none         _____            _____        &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
    _____             _____              _____         _____         _____            _____        _____             _____           _____            _____
                                                       &mkp MB1      &mkp MB2         &none        &mkp MB3
    >;
};

    };
};